//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
[Serializable]
public class TrafficController
{
    //******************************************************************************************************************************
    // Feilds & properties
    private List<TrafficLight> TrafficGroupList { get; set; }
    private List<TrafficLight> TrafficGroupListWithPedstrian { get; set; }

    private int innerCounter;                                       // Counter For How many Seconds each traffic - "Stand Alone" - can be set for
    private int outterCounter;                                      //Counter For the pair of each Traffic light;
    private const int constatntTimerDown = 60;
    //******************************************************************************************************************************
    // constructor

    public TrafficController()
    {

        innerCounter = constatntTimerDown; // Every 6 seconds the timer will change the value By setting
        outterCounter = 0;
        TrafficGroupList = new List<TrafficLight>();   //  Array with 6 corrdinates 
        TrafficGroupListWithPedstrian = new List<TrafficLight>();// Array with 4 corrdinates
    }

    //******************************************************************************************************************************
    //Methods
    public void SetSensor()
    {
        // TODO
    }

    public void Update()
    {
        // Called at each timer tick 
        // Update Values By changeing the colors of each Cordinate in the traffic light 
        // The update Happens by the inner Counter and Outter Counter 
        innerCounter--;
        if (innerCounter < 0)
        {
            int temp = IncrementListener();
            ResetTraffic();
            foreach (TrafficLight item in TrafficGroupList)
            {
                item.SetColor(temp);
            }
        }
        foreach (TrafficLight item in TrafficGroupListWithPedstrian)
        {
            
        }

    }

    public void SetInnerCounter(int Seconds)
    {
        innerCounter = Seconds;
    }

    public List<TrafficLight> GetTrafficLight()
    {
        return TrafficGroupList;       
    }
    public List<TrafficLight> GetTrafficLightWithPedstrian()
    {
        return TrafficGroupListWithPedstrian;
    }
    public void AddTrafficLightToRoadPiece(CrossingType ct, TrafficLight obj)
    {
        switch (ct)
        {
            case CrossingType.CrossingWithPedestrian:
                TrafficGroupListWithPedstrian.Add(obj);
                break;

            case CrossingType.CrossingWithoutPedestrian:
                TrafficGroupList.Add(obj);
                break;
        }


    }

    public void ResetTraffic()
    {
        innerCounter = constatntTimerDown;
    }
    public int IncrementListener()
    {
       int holder;
       holder = (outterCounter) % 3;
       outterCounter += 1;
        Console.WriteLine("Holder Of logic is : " + holder + " Outtercounter is :" + outterCounter);
        return holder;
    }


}

